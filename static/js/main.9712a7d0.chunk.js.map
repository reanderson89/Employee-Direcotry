{"version":3,"sources":["components/Row/Row.jsx","utils/API.js","containers/Main/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["Row","firstName","lastName","phone","email","picture","scope","alt","src","axios","get","Main","useState","employeeState","setEmployeeState","search","setSearch","useEffect","API","then","res","data","results","catch","err","console","log","style","backgroundColor","color","className","type","name","value","onChange","event","target","placeholder","onClick","sortedEmployees","sort","a","b","first","last","filter","emp","toLowerCase","includes","cell","map","thumbnail","login","uuid","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9712a7d0.chunk.js","sourcesContent":["// deconstructed the props object and called only what was needed. This is where all of the employees individual information will get past to as the rows are created.\nconst Row = ({firstName, lastName, phone, email, picture}) => {\n    return (\n        <tr>\n      <th scope=\"row\">\n      <img alt=\"Employee Head-shot\" src={picture} />\n      </th>\n      <td>{firstName} {lastName}</td>\n      <td>{phone}</td>\n      <td>{email}</td>\n    </tr>\n    );\n};\n\nexport default Row;","import axios from \"axios\";\nconst infoToGet = \"inc=login,name,email,cell,picture\";\nconst numberOfEmployees = \"results=50\";\nconst country = \"nat=us\"\nconst query = \"https://randomuser.me/api/\";\n\n// Created variables for all of the parameters of the API query to make it easier to adjust data as needed.\n\nexport default {\n  search: function() {\n    return axios.get(`${query}?${country}&${numberOfEmployees}&${infoToGet}`);\n  }\n};\n","import { useEffect, useState } from 'react';\nimport Row from \"../../components/Row/Row\";\nimport API from \"../../utils/API\";\nimport \"./Main.css\";\n\n// creating state hooks that can be used to render the page on change\nconst Main = () => {\n    const [employeeState, setEmployeeState] = useState([]);\n    const [search, setSearch] = useState(\"\");\n\n    // make an API call when the page loads\n  useEffect(() => {\n    API.search()\n      .then(res => {\n          setEmployeeState(res.data.results);\n      })\n      .catch(err => console.log(err));\n  }, []);\n\n  \n  // sorts the names from A-Z, if the first names are the same, it sorts by last name.\n  const handleSortUpName = () => {\n    const spreadEmployee = [...employeeState];\n    const sortedEmployees = spreadEmployee.sort((a,b) => (a.name.first > b.name.first) ? 1 : (a.name.first === b.name.first) ? ((a.name.last > b.name.last)? 1 : -1): -1)\n    setEmployeeState(sortedEmployees);\n  };\n\n    // sorts the names from Z-A, if the first names are the same, it sorts by last name.\n  const handleSortDownName = () => {\n    const spreadEmployee = [...employeeState];\n    const sortedEmployees = spreadEmployee.sort((a,b) => (b.name.first > a.name.first) ? 1 : (b.name.first > a.name.first) ? ((b.name.last > a.name.last) ?1 : -1): -1)\n    setEmployeeState(sortedEmployees);\n  };\n\n  // filters the search results as the search value is typed\n  const handleInputChange = event => {\n    let value = event.target.value;\n    setSearch(value);\n  };\n\n    return (\n      <>\n      <div style={{backgroundColor: \"teal\", color: \"white\"}} className=\"row\">\n      <div className=\"col-sm-4\">\n      </div>\n        <div className=\"col-sm-4\">\n          <div className=\"input-group\" >\n      <input type=\"text\" className=\"form-control mb-3 mt-3\" name=\"search\" value={search} onChange={handleInputChange} placeholder=\"Search\"/>\n      </div>\n      <div className=\"col-sm-4\">\n      </div>\n        </div>\n      </div>\n      <div className=\"row\">\n          <div className=\"col-sm\">\n        <table className=\"table table-hover\">\n  <thead className=\"text-center\">\n    <tr>\n      <th scope=\"col\">Picture</th>\n      <th scope=\"col\">\n        <span>\n          <button onClick={handleSortUpName} >\n            <i className=\"fas fa-angle-double-up\">\n              </i> \n          </button>\n        </span> \n        Name \n        <span>\n          <button onClick={handleSortDownName} >\n             <i className=\"fas fa-angle-double-down\">\n               </i>\n          </button>\n        </span>\n      </th>\n      <th scope=\"col\">Phone</th>\n      <th scope=\"col\">Email</th>\n    </tr>\n  </thead>\n  <tbody className=\"text-center\">\n      {/* Row component: The .filter function is a part that enables the live filtering you see on the site, then the .map creates the rows of employees that get filtered. */}\n      {employeeState\n      .filter(\n       emp => emp.name.first.toLowerCase().includes(search.toLowerCase()) ||\n       emp.name.last.toLowerCase().includes(search.toLowerCase()) ||\n       emp.cell.includes(search) ||\n       emp.email.toLowerCase().includes(search.toLowerCase()))\n       .map(emp => (\n          <Row\n            firstName={emp.name.first}\n            lastName={emp.name.last}\n            phone={emp.cell}\n            email={emp.email}\n            picture={emp.picture.thumbnail}\n            key={emp.login.uuid}\n          />\n        ))}\n  </tbody>\n</table>\n</div>\n        </div>\n        </>\n    );\n};\n\nexport default Main;","import React from \"react\";\nimport Main from \"./containers/Main/Main.jsx\";\n\nconst App = () => {\n  return (\n    <div>\n      <div  className=\"container\" >\n        <div className=\"row\">\n          <div style={{backgroundColor: \"teal\", color: \"white\"}} className=\"col text-center\">\n            <h1  className=\"text-center\">Employee Directory</h1>\n            <h5  className=\"text-center\">A convenient way to search for co-workers</h5>\n          </div>\n        </div>\n        <Main />         \n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}